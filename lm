#!/usr/bin/env perl

use 5.10.0;

use strict;
use warnings;

use Cwd;
use Data::Dumper;
use File::Find;

use constant
{
    LISTDIR => '.lm',
    USAGE => <<EOF
usage: lm COMMAND [ARGS]

The most commonly used lm commands are:
   add        Add files to the list.
   help       Display this message.
   init       Initialize the list.
   remove     Remove files from the list.
   status     Show the list status.

See 'lm help COMMAND' for more information on specific commands.
EOF
};

open(my $rlog, ">", "recursion.log") or die;

my ($subcommand, @args) = @ARGV;

unless(defined($subcommand))
{
    print STDERR USAGE;
    exit 1;
}

my %dispatch = (
    add => \&add,
    init => \&init,
    help => \&help,
    remove => \&remove,
    status => \&status
);

my $sub = $dispatch{$subcommand} || $dispatch{help};

$sub->(\@args);

sub add
{
    say 'add';
}

sub find_list_dir
{
    return LISTDIR if -e LISTDIR;

    my $cwd = getcwd;
    my $last = $cwd;
    my $found = undef;

    while(1)
    {
        chdir '..' or last;
        my $current = getcwd;
        last if $last eq $current;
        $last = $current;

        if(-d LISTDIR)
        {
            chdir $cwd;
            $found = '$current/' . LISTDIR;
        }
    }

    return $found;
}

sub help
{
    my %help = (
        add => <<EOF,
The add help.
EOF
        init => <<EOF,
The init help.
EOF
        help => <<EOF,
The help help.
EOF
        remove => <<EOF,
The remove help.
EOF
        status => <<EOF,
The status help.
EOF
        error => <<EOF
'%s' is not a command. See 'lm help'.
EOF
    );

    my @args = @{$_[0]};

    if($#args == -1)
    {
        print USAGE;
        exit 0;
    }
    elsif($#args != 0)
    {
        print STDERR "Too many arguments to subcommand 'help'.\n";
        print STDERR USAGE;
        exit 1;
    }
    else
    {
        my $subcommand = $args[0];
        my $help = $help{$subcommand} || $help{error};
        print sprintf($help, $subcommand);
        exit 0;
    }
}

sub init
{
    if(defined(find_list_dir()))
    {
        print STDERR "List already initialized.\n";
        exit 1;
    }

    mkdir LISTDIR;
}

sub remove
{
    say 'remove';
}

sub status
{
    say 'status';

    unless(defined(find_list_dir()))
    {
        print STDERR "List not initialized. See 'init' subcommand.\n";
        exit 1;
    }
}

